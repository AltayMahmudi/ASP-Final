// <auto-generated />
using System;
using JotexRepository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JotexRepository.Migrations
{
    [DbContext(typeof(JotexDbContext))]
    partial class JotexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JotexRepository.Models.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("baseEntities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");
                });

            modelBuilder.Entity("JotexRepository.Models.MultiCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("MultiCaseSecondary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultiCaseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MulticasePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("caseStudiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("caseStudiesId");

                    b.ToTable("multiCases");
                });

            modelBuilder.Entity("JotexRepository.Models.CaseStudies", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CaseText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseTextBold")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caseİmage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CaseStudies");
                });

            modelBuilder.Entity("JotexRepository.Models.CaseTabs", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<string>("CaseTabText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseTabTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseTabsId")
                        .HasColumnType("int");

                    b.Property<int?>("caseStudiesId")
                        .HasColumnType("int");

                    b.HasIndex("caseStudiesId");

                    b.HasDiscriminator().HasValue("CaseTabs");
                });

            modelBuilder.Entity("JotexRepository.Models.Category", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<int>("CategoryTitle")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Category");
                });

            modelBuilder.Entity("JotexRepository.Models.Service", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<string>("BottomInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BottomTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Service");
                });

            modelBuilder.Entity("JotexRepository.Models.ServiceDetail", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<int>("GracePeriod")
                        .HasColumnType("int");

                    b.Property<bool>("IsPolicyModificationOnline")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SupportHour")
                        .HasColumnType("int");

                    b.HasIndex("ServiceId");

                    b.HasDiscriminator().HasValue("ServiceDetail");
                });

            modelBuilder.Entity("JotexRepository.Models.ServiceFeature", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ServiceFeature");
                });

            modelBuilder.Entity("JotexRepository.Models.Subscription", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Subscription");
                });

            modelBuilder.Entity("JotexRepository.Models.TAG", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<int?>("CaseStudiesId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("TagName")
                        .HasColumnType("int");

                    b.HasIndex("CaseStudiesId");

                    b.HasDiscriminator().HasValue("TAG");
                });

            modelBuilder.Entity("JotexRepository.Models.Testimonial", b =>
                {
                    b.HasBaseType("JotexRepository.Models.BaseEntity");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Testimonalİd")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Testimonial");
                });

            modelBuilder.Entity("JotexRepository.Models.MultiCase", b =>
                {
                    b.HasOne("JotexRepository.Models.CaseStudies", "caseStudies")
                        .WithMany()
                        .HasForeignKey("caseStudiesId");
                });

            modelBuilder.Entity("JotexRepository.Models.CaseTabs", b =>
                {
                    b.HasOne("JotexRepository.Models.CaseStudies", "caseStudies")
                        .WithMany()
                        .HasForeignKey("caseStudiesId");
                });

            modelBuilder.Entity("JotexRepository.Models.Service", b =>
                {
                    b.HasOne("JotexRepository.Models.Category", "category")
                        .WithOne("service")
                        .HasForeignKey("JotexRepository.Models.Service", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JotexRepository.Models.ServiceDetail", b =>
                {
                    b.HasOne("JotexRepository.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JotexRepository.Models.TAG", b =>
                {
                    b.HasOne("JotexRepository.Models.CaseStudies", "CaseStudies")
                        .WithMany()
                        .HasForeignKey("CaseStudiesId");
                });
#pragma warning restore 612, 618
        }
    }
}
